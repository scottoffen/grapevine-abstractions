using System.Diagnostics;
using System.Text;

namespace Grapevine.Abstractions;

/// <summary>
/// A class that represents a problem details object as defined by the RFC 7807 specification.
/// </summary>
[DebuggerDisplay("{Title} ({Status})")]
public class ProblemDetails
{
    /// <summary>
    /// Additional fields can be added to the object to convey application-specific details
    /// </summary>
    public IDictionary<string, object> Extensions { get; set; } = new ProblemDetailsExtensions();

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem
    /// </summary>
    public string Detail { get; set; } = string.Empty;

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem. It provides a way to locate logs or other details specific to this error.
    /// </summary>
    public string Instance { get; set; } = string.Empty;

    /// <summary>
    /// The HTTP status code generated by the server for this occurrence of the problem.
    /// </summary>
    public int Status { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
    /// </summary>
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// A URI reference for the problem type; can be an absolute or relative URI.
    /// </summary>
    public string Type { get; set; } = "about:blank";

    public ProblemDetails()
    { }

    public ProblemDetails(int status, string title, string detail = "", string type = "about:blank", string instance = "")
    {
        Status = status;
        Title = title;
        Detail = detail;
        Type = type;
        Instance = instance;
    }

    public override string ToString()
    {
        return $"{Title} ({Status}): {Detail}";
    }

    /// <summary>
    /// Serializes the ProblemDetails object to a JSON string.
    /// </summary>
    /// <returns></returns>
    public string ToJson()
    {
        var sb = new StringBuilder();
        sb.Append("{");

        sb.AppendJson("type", Type);
        sb.Append(",");
        sb.AppendJson("title", Title);
        sb.Append(",");
        sb.AppendJson("status", Status);
        sb.Append(",");
        sb.AppendJson("detail", Detail);
        sb.Append(",");
        sb.AppendJson("instance", Instance);

        foreach (var extension in Extensions)
        {
            sb.Append(",");
            sb.AppendJson(extension.Key, extension.Value);
        }

        sb.Append("}");
        return sb.ToString();
    }
}
